// https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/2.3.5.RELEASE/spring-boot-dependencies-2.3.5.RELEASE.pom

plugins {
	id 'java'
	id 'groovy'
	id "jacoco"
	id 'org.springframework.boot' version "2.3.5.RELEASE"
	id 'io.spring.dependency-management' version "1.0.10.RELEASE"
	id "com.avast.gradle.docker-compose" version "0.14.0"
	id "com.gorylenko.gradle-git-properties" version "2.2.4"
	id "com.palantir.git-version" version "0.12.3"
	id "org.sonarqube" version "3.0"
	id "org.openapi.generator" version "5.0.0"
}

version = gitVersion()
sourceCompatibility = 15
group = "com.github.mwierzchowski.dummy" // TODO change group name
description = "Template project for microservices" // TODO change service description

repositories {
	mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR9"
		mavenBom "org.spockframework:spock-bom:1.3-groovy-2.5"
	}
}

ext {
	schemaName = project.name.replace('-', '_')
	springBootAdminVersion = "2.3.1"
	mapStructVersion = "1.4.1.Final"
	springDocVersion = "1.5.0"
	shedlockVersion = "4.15.1"
	p6spyVersion = "1.6.2"
	swaggerAnnotationsVersion = "1.5.22"
	findbugsJsr305Version = "3.0.2"
	resilience4jVersion = "1.6.1"
	playtikaVersion = "1.86"
}

dependencies {
	// Management
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
	implementation "de.codecentric:spring-boot-admin-starter-client:$springBootAdminVersion"

	// Web
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation "org.springdoc:springdoc-openapi-webmvc-core:$springDocVersion"

	// Database
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.postgresql:postgresql"
	implementation "org.liquibase:liquibase-core"
	implementation "com.github.gavlyukovskiy:p6spy-spring-boot-starter:$p6spyVersion"
	testImplementation "com.playtika.testcontainers:embedded-postgresql:$playtikaVersion"

	// Redis
	implementation "org.springframework.boot:spring-boot-starter-data-redis"
	testImplementation "com.playtika.testcontainers:embedded-redis:$playtikaVersion"

	// Scheduler lock
	implementation "net.javacrumbs.shedlock:shedlock-spring:$shedlockVersion"
	implementation "net.javacrumbs.shedlock:shedlock-provider-redis-spring:$shedlockVersion"

	// Resilience
	implementation "io.github.resilience4j:resilience4j-spring-boot2:$resilience4jVersion"

	// Rest clients
	implementation "io.swagger:swagger-annotations:$swaggerAnnotationsVersion"
	implementation "com.google.code.findbugs:jsr305:$findbugsJsr305Version"
	testImplementation "org.springframework.cloud:spring-cloud-contract-wiremock"

	// Lombok
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'

	// MapStruct
	annotationProcessor "org.mapstruct:mapstruct-processor:$mapStructVersion"
	implementation "org.mapstruct:mapstruct:$mapStructVersion"

	// General testing
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation "org.spockframework:spock-spring"

	// Development
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

tasks.withType(ProcessResources) {
	filesMatching(['**/*.yml', '**/*.sql']) {
		expand(project.properties)
	}
}

jacocoTestReport {
	reports {
		xml.enabled true
	}
}

task sunriseSunsetGenerate(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	def sourcesRoot = "$buildDir/generated/sources/sunrise-sunset"
	inputSpec = "$rootDir/specs/sunrise-sunset-spec.yml"
	outputDir = sourcesRoot
	generatorName = "java"
	library = "resttemplate"
	configOptions = [
			apiPackage: "org.sunrisesunset.api",
			modelPackage: "org.sunrisesunset.model",
			invokerPackage: "org.sunrisesunset.invoker",
			dateLibrary: "java8"
	]
	sourceSets.main.java.srcDirs += "$sourcesRoot/src/main/java"
	compileJava.dependsOn tasks.sunriseSunsetGenerate
}

dockerCompose {
	projectName = project.name
}