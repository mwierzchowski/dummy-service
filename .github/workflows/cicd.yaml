name: CI/CD
on: push
env:
  ORGANIZATION: ${{ github.repository_owner }}
  PROJECT: ${{ github.event.repository.name }}
  IMAGE: ${{ github.repository_owner }}/${{ github.event.repository.name }}
  CANDIDATE: rc
  JAVA: 1.15

jobs:
  Build:
    runs-on: ubuntu-latest
    outputs:
      version-final: ${{ env.FINAL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA }}

      - name: Restore Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build image
        run: ./gradlew bootBuildImage --imageName=$IMAGE:$CANDIDATE --console=plain

      - name: Publish candidate
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u $ORGANIZATION --password-stdin
          docker push $IMAGE:$CANDIDATE
          echo "FINAL=$(./gradlew printVersion -q --console=plain)" >> $GITHUB_ENV

  Test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA }}

      - name: Restore Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Restore SonarCloud cache
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Test application
        run: ./gradlew test --info --console=plain

      - name: Get SonarCloud token
        run: |
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}" >> $GITHUB_ENV

      - name: SonarCloud scan
        if: ${{ env.SONAR_TOKEN != 0}}
        run:
          ./gradlew jacocoTestReport sonarqube --console=plain -Dsonar.host.url=https://sonarcloud.io -Dsonar.organization=${ORGANIZATION} -Dsonar.projectKey=${ORGANIZATION}_${PROJECT} -Dsonar.exclusions="build/generated/sources/**.*"

      - name: Publish tests report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Tests Report
          path: ./build/reports/tests/test

  Release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - Build
      - Test
    steps:
      - name: Publish release
        env:
          FINAL: ${{needs.Build.outputs.version-final}}
        run: |
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u $ORGANIZATION --password-stdin
          docker pull $IMAGE:$CANDIDATE
          docker tag $IMAGE:$CANDIDATE $IMAGE:$FINAL
          docker tag $IMAGE:$CANDIDATE $IMAGE:latest
          docker push $IMAGE:$FINAL
          docker push $IMAGE:latest
          echo "Released $IMAGE with tags $FINAL and latest"